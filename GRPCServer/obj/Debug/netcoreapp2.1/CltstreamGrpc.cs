// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cltstream.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GRPCServer.Protos {
  public static partial class Cltstream
  {
    static readonly string __ServiceName = "count.Cltstream";

    static readonly grpc::Marshaller<global::GRPCServer.Protos.CounterRequest> __Marshaller_count_CounterRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GRPCServer.Protos.CounterRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GRPCServer.Protos.CounterReply> __Marshaller_count_CounterReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GRPCServer.Protos.CounterReply.Parser.ParseFrom);

    static readonly grpc::Method<global::GRPCServer.Protos.CounterRequest, global::GRPCServer.Protos.CounterReply> __Method_AccumulateCount = new grpc::Method<global::GRPCServer.Protos.CounterRequest, global::GRPCServer.Protos.CounterReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AccumulateCount",
        __Marshaller_count_CounterRequest,
        __Marshaller_count_CounterReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GRPCServer.Protos.CltstreamReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Cltstream</summary>
    [grpc::BindServiceMethod(typeof(Cltstream), "BindService")]
    public abstract partial class CltstreamBase
    {
      /// <summary>
      ///Client Streaming RPC 
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GRPCServer.Protos.CounterReply> AccumulateCount(grpc::IAsyncStreamReader<global::GRPCServer.Protos.CounterRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Cltstream</summary>
    public partial class CltstreamClient : grpc::ClientBase<CltstreamClient>
    {
      /// <summary>Creates a new client for Cltstream</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CltstreamClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Cltstream that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CltstreamClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CltstreamClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CltstreamClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Client Streaming RPC 
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::GRPCServer.Protos.CounterRequest, global::GRPCServer.Protos.CounterReply> AccumulateCount(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AccumulateCount(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Client Streaming RPC 
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::GRPCServer.Protos.CounterRequest, global::GRPCServer.Protos.CounterReply> AccumulateCount(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_AccumulateCount, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CltstreamClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CltstreamClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CltstreamBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AccumulateCount, serviceImpl.AccumulateCount).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CltstreamBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AccumulateCount, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::GRPCServer.Protos.CounterRequest, global::GRPCServer.Protos.CounterReply>(serviceImpl.AccumulateCount));
    }

  }
}
#endregion
